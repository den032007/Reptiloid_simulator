local flow = require "m.flow"
local wait = flow
local monarch = require "monarch.monarch"
local global = require "global"
local lang = require "lang"
local clone = require "m.clone"
local util = require "m.util"
local random = math.randomseed(os.time())
local save_file = sys.get_save_file("gamedata", "gamedata")


local hash = hash

local function send_ship_at(pos, props, ship_type)
	local message = { destination = pos, properties = props , ship_type = ship_type}
	pprint(ship_type)
	msg.post("game:/port", "spawn_ship", message)
end

local function send_ship_to(url, props, ship_type)
	send_ship_at(go.get_world_position(url), props, ship_type )
end

local function say(text)
	monarch.show(hash "dialogue", nil, { text = text, time = time })
	wait.until_message(monarch.FOCUS.GAINED)
end

local function wave(self, planet_pool, props, delay, wave_ships)
	ship_counter = 0
	ships={}
	for ship_type, count in pairs(wave_ships) do
		con=0
		while con < wave_ships[ship_type] do
			con = con +1
			table.insert(ships, ship_type) 
			ship_counter = ship_counter +1 
		end

	end
	util.shuffle(ships)
	pprint(ships)

	self.parallel = flow.parallel(function()
		local targets = clone(planet_pool)
		while #targets < ship_counter do
			local planet = util.random(planet_pool)
			table.insert(targets, 1, planet)
		end
		
		util.shuffle(targets)

		wait.delay(delay/3)
		for i = 1, ship_counter do
			ship_type = ships[i]
			pprint(ship_type)
			send_ship_to(targets[i], props, ship_type)
			wait.delay(delay)
		end
	end)

	for i = 1, ship_counter do
		wait.until_message(hash "mission_done", hash "hit")
	end
end

local function increase_level_counter(self, current_level)
	gamedata = sys.load(save_file)
	if current_level == gamedata.last_level then
		gamedata.last_level = gamedata.last_level +1
		gamedata.current_level = gamedata.current_level +1
		sys.save(save_file, gamedata)
	end	
end
	
local function pour_off(self, count)
	global.max_space = 110
	global.space = 0
	for i = 1, count do
		global.max_space = global.max_space + 1
		global.space = global.space + 1
		msg.post("game:/manager", "update_counter")
		wait.delay(0.0425)
	end
end

local function add_destinations(planet_pool, ...)
	local urls = { ... }
	for _, url in pairs(urls) do
--		local pos = go.get_world_position(url)
		table.insert(planet_pool, url)
	end
end

local function tutorial(self)
	msg.post("game:/tools", "release_input_focus")
	wait.delay(0.5)

	send_ship_to(msg.url "game:/planet1", { speed = 1 },"normal")

	wait.delay(3)
	say(lang.tutorial.call_to_action[lang.current()])

	msg.post("game:/tools", "acquire_input_focus")

	local message_id = flow.until_message(hash "flight_done", hash "hit")

	if message_id == hash "flight_done" then
		wait.delay(1)
		say(lang.tutorial.good_reaction[lang.current()])
		return true
	elseif message_id == hash "hit" then
		wait.delay(0.25)
		say(lang.tutorial.bad_reaction[lang.current()])
		return false
	end
end

local function level1(self, do_tutorial)
	pour_off(self, 0)
	msg.post("game:/manager", "update_counter")
	local wait_tutorial_ship
	local planet_pool = {}
	if do_tutorial then
		wait_tutorial_ship = tutorial(self)
	end

	wave_ships = { normal = 8}
	add_destinations(planet_pool, "/planet2", "/planet3", "/planet4", "/planet5")

	if wait_tutorial_ship then
		wait.until_message(hash "mission_done", hash "hit")
	end

	wave(self, planet_pool, nil, 8, wave_ships)
	say(lang.wave_1_end[lang.current()])
end

local function level2(self)
	pour_off(self, 30)
	msg.post("game:/manager", "update_counter")
	local planet_pool = {}
	wave_ships = { normal = 6, fat_ship  = 2}
	add_destinations(planet_pool, "planet1", "/planet2", "/planet3", "/planet4", "/planet5",  "planet6", "planet7")

	say(lang.radar_hint[lang.current()])

	wave(self, planet_pool, { speed = 1 }, 10, wave_ships)

	say(lang.wave_2_end[lang.current()])
end

local function level3(self)
	pour_off(self, 50)
	local planet_pool = {}
	add_destinations(planet_pool, "planet1", "/planet2", "/planet3", "/planet4", "/planet5",  "planet6", "planet7")
	wave_ships = { normal = 4, fat_ship  = 4}
	
	wave(self, planet_pool, { speed = 1.5 }, 8, wave_ships)

	say(lang.wave_3_end[lang.current()])

end

local function level4(self)
	pour_off(self, 100)
	local planet_pool = {}
	add_destinations(planet_pool, "planet", "planet1", "/planet2", "/planet3", "/planet4", "/planet5", "planet6", "planet7", "planet8")
	
	wave_ships = { normal = 2, fat_ship  = 6}
	wave(self, planet_pool, { speed = 2 }, 8, wave_ships)
	pour_off(self, 50)
end

local function play_level(self, level, do_tutorial)
	if level == 1 then
		global.max_space = 110
		level1(self, do_tutorial)
		increase_level_counter(self, level)
	elseif level ==2 then
		level2(self)
		increase_level_counter(self, level)
	elseif level ==3 then
		level3(self)
		increase_level_counter(self, level)
	elseif level ==4 then
		level4(self)
		return true
	end
	return false
end

local function good_end_game(self)
	monarch.show(hash "gameover", nil, { win = true })
end
		
local function session(self)
	math.randomseed(os.clock())
	local data = monarch.data(hash "game")
	local do_tutorial = data and data.tutorial
	local wait_tutorial_ship

	if do_tutorial then
		gamedata = sys.load(save_file)
		gamedata.current_level = 1
		sys.save(save_file, gamedata)
	end
		
	local game_end = false
	while game_end == false do
		gamedata = sys.load(save_file)
		current_level = gamedata.current_level
		pprint(current_level)
		game_end = play_level(self, current_level, do_tutorial)
	end

	good_end_game()
end

function init(self)
	--erase_max_level()
	--local gamedata = sys.load(save_file)
	--local maximal_level = gamedata.last_level
	--pprint(maximal_level)
	--gamedata.last_level= maximal_level+15
	--sys.save(save_file, gamedata)
	--gamedata = sys.load(save_file)
	--pprint(gamedata)
	
	sound.play "loader:/sound#space"
	self.timers = {}

	global.stress = 0
	global.space = 0
	global.max_space = 110

	global.ship_properties.speed = 15
	self.flow = flow.start(function() session(self) end)
end

function final(self)
	sound.stop "loader:/sound#space"
	for handle in pairs(self.timers) do
		timer.cancel(handle)
	end
	flow.stop(self.parallel)
	flow.stop(self.flow)
end

function update(self, dt)
	flow.update(dt)
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
