go.property("speed", 11)
go.property("base", vmath.vector3())
go.property("next_stop", vmath.vector3())
go.property("alert", false)

local function assert_tracer(self)
	if not self.tracer then return end

	timer.cancel(self.tracer)

	for impulse in pairs(self.impulses) do
		go.delete(impulse)
	end
end

local function finish_flight(self)
	assert_tracer(self)

	if self.is_last_flight then
		msg.post("game:/manager", "mission_done", { alert = self.alert })
		go.delete(".", true)
	else
		msg.post("game:/manager", "point_done")
	end
end

local function send_impulse(self, destination)
	assert_tracer(self)

	self.impulses = {}

	local origin = go.get_world_position()
	local direction = destination - origin
	local distance = vmath.length(direction)
	local duration = distance / self.speed / 6
	local rotation = -math.atan2(direction.x, direction.y)
		
	self.tracer = timer.delay(0.5, true,
	function()
		local impulse = factory.create("game:/manager#impulse_factory", origin)
		self.impulses[impulse] = true
		go.animate(impulse, "position", go.PLAYBACK_ONCE_FORWARD, destination, go.EASING_LINEAR, duration, 0,
		function() go.delete(impulse); self.impulses[impulse] = nil end)

		go.set_rotation(vmath.quat_rotation_z(rotation), impulse)
	end)
end

function final(self)
	assert_tracer(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hash "trigger_response" then
		print(message_id, message.own_group)
		if message.own_group == hash "ship" then
			msg.post("game:/manager", "hit")
			sound.play "loader:/sound#explosion"
			go.delete(".", true)
		elseif message.own_group == hash "radar" then
			if self.alarm then
				return
			end
			self.alarm = true
			sound.play "loader:/sound#alert"
			msg.post("game:/manager", "suspicion")
		end

	elseif message_id == hash "redirect_ship" then
		counter = 0
		if self.settings_set == false then
			self.settings_set = true
			for i, key in pairs(message.destination) do
				counter = counter + 1
			end
			self.max_fligh_counter = counter
			self.destination_list = message.destination
		end

		self.fligh_done = self.fligh_done + 1 

		if self.fligh_done <= self.max_fligh_counter  then
			destination = self.destination_list[self.fligh_done] 
		else
			destination = self.base
			self.is_last_flight = true
		end

		local direction = 0
		direction = destination - go.get_world_position()

		local distance = vmath.length(direction)
		local duration = distance / self.speed
		local next_destination = destination
		local flight_done = self.fligh_done

		local angle = math.pi / 4 - math.atan2(direction.x, direction.y)
		local rotation = vmath.quat_rotation_z(angle)
		go.set_rotation(rotation)

		send_impulse(self, next_destination)

		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, next_destination, go.EASING_LINEAR, duration, 0, finish_flight)
	end
end

local function set_normal_and_jump(self)
	sprite.play_flipbook(".", "Jumper") 
	self.speed = 500
	self.fligh_done = self.fligh_done - 1
	destination = self.destination_list

	msg.post(sender, "redirect_ship", { destination = {destination}})
end
	
function init(self)
	particlefx.stop("#ship_particles")
	
	timer.delay(3, false, function()
		self.speed = 0
		self.fligh_done = self.fligh_done - 1
		destination = self.destination_list
		particlefx.play("#ship_particles")
		msg.post(sender, "redirect_ship", { destination = {destination}})
	end)

	timer.delay(8, false, function()
		particlefx.stop("#ship_particles")
		sprite.play_flipbook(go.get_id(), "build_gate", function() 
			set_normal_and_jump(self) end)
	end)
	
	self.counter = 0
	self.is_last_flight = false
	self.settings_set = false
	self.destination_list = {}
	self.base = go.get_world_position()
	self.max_fligh_counter = 0
	self.fligh_done = 0
end